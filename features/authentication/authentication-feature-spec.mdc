# Authentication Feature Specification

## Overview
This document defines the comprehensive authentication system for JobBooster 2025, enabling secure user registration, login, profile management, and data persistence for personalized CV analysis and content generation. The system leverages Supabase as the backend-as-a-service platform with Prisma ORM for type-safe database operations.

**Key Design Principle**: Users can access the main application page without registration or login. Authentication is only required when users attempt to use CV analysis features, at which point a popup modal prompts them to register or login.

---

### 1. **Anonymous Access & Authentication Flow**

#### **Anonymous Access**
- **Main Page Access**: Users can access the main application page without registration or login
- **Feature Preview**: Users can view the interface, upload CVs, and input job descriptions
- **Authentication Trigger**: Authentication is only required when users click "Analyze CV" button
- **Popup Modal**: A modal appears prompting users to either register or login
- **Seamless Transition**: After authentication, users are redirected back to their previous action

#### **Authentication Modal Flow**
- **Trigger**: CV Analysis button click
- **Modal Options**: 
  - Quick registration (email/password)
  - Quick login (existing users)
  - OAuth options (Google)

- **Post-Authentication**: Automatic redirect to CV analysis with preserved form data

---

### 2. **User Registration & Login System**

#### **Email/Password Authentication**
- **Registration Flow**:
  - Configurable email validation (enabled/disabled via environment variables)
  - Password strength requirements (8+ chars, mixed case, numbers)
  - Email confirmation via magic link (configurable)
  - Automatic profile creation upon verification
  - Welcome email with onboarding instructions

#### **Configurable Email Validation**
- **Environment Variables**:
  - `REQUIRE_EMAIL_VERIFICATION=true/false` - Enable/disable email verification requirement

- **Validation Levels**:

- **Login Flow**:
  - Email/password authentication
  - "Remember me" functionality (30-day session)
  - Password reset via email
  - Account lockout after 5 failed attempts
  - Session management with automatic refresh

#### **OAuth Integration**
- **Supported Providers**:
  - Google OAuth (primary)

- **Account Linking**: Merge OAuth accounts with existing email accounts
- **Profile Sync**: Auto-populate profile data from OAuth providers

#### **Magic Link Authentication**
- **Passwordless Login**: Email-based authentication
- **Secure Token Generation**: Time-limited, single-use tokens
- **Mobile-Friendly**: Deep link support for mobile devices

### 2. **User Profile Management**

#### **Profile Data Structure**
```typescript
interface UserProfile {
  id: string;
  email: string;
  fullName: string;
  username: string;
  avatarUrl?: string;
  preferences: {
    language: string;
    timezone: string;
    notifications: {
      email: boolean;
      push: boolean;
      marketing: boolean;
    };
    privacy: {
      profileVisibility: 'public' | 'private';
      dataRetention: number; // days
    };
  };
  subscription: {
    plan: 'free' | 'premium' | 'enterprise';
    expiresAt?: Date;
    features: string[];
  };
  createdAt: Date;
  updatedAt: Date;
}
```

#### **Profile Features**
- **Basic Information**: Name, email, username, avatar
- **Preferences**: Language, timezone, notification settings
- **Privacy Controls**: Data visibility, retention policies
- **Account Settings**: Password change, email verification
- **Subscription Management**: Plan details, billing information

### 3. **Session Management & Security**

#### **Session Architecture**
- **JWT Tokens**: Secure, stateless authentication
- **Refresh Tokens**: Long-lived tokens for session persistence
- **Session Storage**: HTTP-only cookies for security
- **Automatic Refresh**: Seamless token renewal
- **Multi-device Support**: Concurrent sessions across devices

#### **Security Features**
- **Row Level Security (RLS)**: Database-level access control
- **CSRF Protection**: Cross-site request forgery prevention



### 4. **Database Integration**

#### **Technology Stack**
- **Supabase**: Backend-as-a-Service platform providing PostgreSQL database, authentication, and real-time features
- **Prisma ORM**: Type-safe database client with auto-generated TypeScript types
- **PostgreSQL**: Primary database with Row Level Security (RLS) policies

#### **Prisma Schema Definition**
```prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  email       String   @unique
  fullName    String?  @map("full_name")
  username    String?  @unique
  avatarUrl   String?  @map("avatar_url")
  preferences Json     @default("{}")
  subscription Json    @default("{\"plan\": \"free\"}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userSessions    UserSession[]
  userActivities  UserActivity[]
  cvData          CvData[]
  generatedContent GeneratedContent[]

  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")

  // Relations
  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}
```

#### **Database Features**
- **Type Safety**: Prisma provides compile-time type checking for all database operations
- **Auto-generated Types**: TypeScript interfaces generated from schema
- **Query Builder**: Intuitive API for complex database queries
- **Relations**: Easy handling of database relationships with type safety
- **Migrations**: Version-controlled database schema changes
- **Connection Pooling**: Efficient database connection management

#### **Data Relationships**
- **One-to-Many**: User â†’ CV Data
- **One-to-Many**: User â†’ Generated Content
- **One-to-Many**: User â†’ User Sessions
- **One-to-Many**: User â†’ Activity Logs

#### **Supabase + Prisma Integration Benefits**

##### **Authentication & Authorization**
- **Supabase Auth**: Handles user authentication, JWT tokens, and session management
- **Prisma ORM**: Provides type-safe access to user data and relationships
- **Row Level Security**: Database-level security policies enforced by Supabase
- **Type Safety**: Compile-time checking for all database operations

##### **Real-time Features**
- **Supabase Realtime**: Live updates for user sessions and activity
- **Prisma Subscriptions**: Type-safe real-time data synchronization
- **WebSocket Integration**: Efficient real-time communication

##### **Development Experience**
- **Auto-generated Types**: Prisma generates TypeScript types from database schema
- **IntelliSense Support**: Full IDE support with autocomplete and error detection
- **Migration Management**: Version-controlled database schema changes
- **Query Optimization**: Automatic query optimization and connection pooling

##### **Performance & Scalability**
- **Connection Pooling**: Efficient database connection management
- **Query Caching**: Built-in query result caching
- **Batch Operations**: Efficient bulk database operations
- **Edge Functions**: Serverless functions for custom business logic

---

## ðŸŸ¡ MEDIUM PRIORITY FEATURES

### 5. **Enhanced User Experience**

#### **Onboarding Flow**
- **Welcome Tour**: Interactive feature introduction
- **Profile Setup**: Guided profile completion
- **First CV Upload**: Tutorial for CV analysis
- **Preferences Configuration**: Personalized settings

#### **User Dashboard**
- **Overview**: Recent activity, quick stats
- **CV Management**: Uploaded CVs, analysis history
- **Generated Content**: Cover letters, emails, recommendations
- **Account Settings**: Profile, preferences, billing

#### **Notification System**
- **Email Notifications**: Account updates, feature announcements
- **In-App Notifications**: Real-time updates, tips
- **Push Notifications**: Mobile app support (future)
- **Notification Preferences**: Granular control

### 6. **Advanced Authentication Features**

#### **Two-Factor Authentication (2FA)**
- **TOTP Support**: Time-based one-time passwords
- **SMS Backup**: Phone number verification
- **Recovery Codes**: Account recovery options
- **Device Management**: Trusted device management

#### **Social Login Enhancements**
- **Profile Picture Sync**: Auto-update from OAuth providers
- **Contact Import**: LinkedIn connections (with permission)
- **Professional Data**: Job history, skills from LinkedIn





---



### 8. **Enterprise Features**

#### **Team Management**
- **Organization Accounts**: Multi-user workspaces
- **Role-Based Access**: Admin, editor, viewer roles







---


### **Security Standards**
- **Password Requirements**: 8+ characters, complexity rules
- **Session Timeout**: 24 hours (extendable to 30 days)
Encryption**: AES-256 for sensitive data


---

## Technical Requirements

### **Dependencies**
```json
{
  "dependencies": {
    "@supabase/ssr": "^0.1.0",
    "@supabase/supabase-js": "^2.39.0",
    "@prisma/client": "^5.7.0",
    "prisma": "^5.7.0",
    "next": "^15.5.2",
    "react": "^19.1.0",
    "typescript": "^5.3.0"
  }
}
```

### **Environment Variables**
```env
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# Database Configuration
DATABASE_URL=postgresql://user:password@host:port/database

# Prisma Configuration
PRISMA_GENERATE_DATAPROXY=true

# Email Validation Configuration
REQUIRE_EMAIL_VERIFICATION=true
EMAIL_VALIDATION_STRICT=true
ALLOW_DISPOSABLE_EMAILS=false

# Authentication Flow Configuration
ENABLE_ANONYMOUS_ACCESS=true
AUTH_REQUIRED_FEATURES=cv_analysis,content_generation
```

### **Database Setup**
1. **Supabase Project**: Create new Supabase project
2. **Prisma Schema**: Define database schema in `prisma/schema.prisma`
3. **Migrations**: Run `npx prisma migrate dev` to create initial schema
4. **Client Generation**: Run `npx prisma generate` to generate TypeScript types
5. **Row Level Security**: Configure RLS policies in Supabase dashboard

---

## User Stories

### **Registration & Onboarding**
```
As a new user,
I want to create an account quickly and securely,
So that I can start using JobBooster to improve my job applications.

Acceptance Criteria:
- Can register with email/password or OAuth
- Receive email confirmation
- Complete profile setup in under 2 minutes
- Access onboarding tour
```

### **Login & Session Management**
```
As a returning user,
I want to log in securely and stay logged in,
So that I can access my saved data and continue my work.

Acceptance Criteria:
- Can log in with email/password or OAuth
- Session persists across browser sessions
- Automatic logout after inactivity
- Can log out from all devices
```

### **Profile Management**
```
As a user,
I want to manage my profile and preferences,
So that I can customize my JobBooster experience.

Acceptance Criteria:
- Can update personal information
- Can change password securely
- Can manage notification preferences
- Can upload and change profile picture
```

### **Data Security & Privacy**
```
As a user,
I want my data to be secure and private,
So that I can trust JobBooster with my personal information.

Acceptance Criteria:
- Data is encrypted in transit and at rest
- Can export my data
- Can delete my account and data
- Can control data sharing preferences
```

---

## Implementation Timeline

###  Core Authentication (Weeks 1-2)**
- Supabase setup and configuration
- Prisma ORM setup and schema definition
- Database migration setup and initial schema deployment
- Basic email/password authentication
- User registration and login flows
- Session management with type-safe database operations
- Basic profile management using Prisma
- OAuth integration (Google, GitHub, LinkedIn)
- Magic link authentication
- User dashboard with real-time data
- Profile customization with type-safe updates
- Notification system with activity tracking


---

