# Authentication Feature Architecture

## Overview
This document outlines the technical architecture and implementation details for the Authentication system in JobBooster 2025, providing secure user management, session handling, and data persistence using Supabase as the backend-as-a-service platform with Prisma ORM for type-safe database operations, built with Next.js 15.5.2, React 19.1.0, TypeScript, Tailwind CSS, and shadcn/ui components.

**Key Architecture Principle**: The system supports anonymous access to the main application interface, with authentication only required for specific features like CV analysis. This is implemented through a modal-based authentication flow that preserves user context and form data.

## System Architecture

### Anonymous Access Architecture
```
┌─────────────────────────────────────────────────────────────────┐
│                    Anonymous User Flow                        │
├─────────────────────────────────────────────────────────────────┤
│  • Access main page without authentication                    │
│  • Upload CV files (stored temporarily)                      │
│  • Input job descriptions                                     │
│  • Preview interface and features   
generate mail or generate lettter user can use them without auth                     │
│  • Click "Analyze CV" → Authentication Modal                 │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    Authentication Modal                        │
├─────────────────────────────────────────────────────────────────┤
│  • Quick registration/login options                           │
│  • OAuth providers (Google,)                │

│  • Preserve form data and context                             │
│  • Redirect to CV analysis after authentication               │
└─────────────────────────────────────────────────────────────────┘
```

### High-Level Architecture
```
┌─────────────────────────────────────────────────────────────────┐
│                    Frontend (Next.js 15.5.2)                   │
├─────────────────────────────────────────────────────────────────┤
│  • React 19.1.0 Components                                   │
│  • TypeScript for Type Safety                                 │
│  • Tailwind CSS for Styling                                   │
│  • shadcn/ui Component Library                                │
│  • Supabase Client Integration                                │
│  • Prisma ORM for Database Operations                        │
│  • Server-Side Rendering (SSR) Support                       │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    Authentication Layer                        │
├─────────────────────────────────────────────────────────────────┤
│  • Supabase Auth Client                                       │
│  • JWT Token Management                                       │
│  • Session Management                                         │
│  • Middleware for Route Protection                            │
│  • Cookie-based Session Storage                               │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    API Layer (Next.js API Routes)              │
├─────────────────────────────────────────────────────────────────┤
│  • /api/auth/login - User authentication                      │
│  • /api/auth/register - User registration                     │
│  • /api/auth/logout - Session termination                     │
│  • /api/auth/refresh - Token refresh                          │
│  • /api/user/profile - Profile management                     │
│  • /api/user/preferences - User preferences                   │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    Supabase Backend                           │
├─────────────────────────────────────────────────────────────────┤
│  • PostgreSQL Database                                        │
│  • Row Level Security (RLS)                                   │
│  • Real-time Subscriptions                                    │
│  • File Storage (Avatars, CVs)                               │
│  • Edge Functions                                             │
│  • Prisma ORM Integration                                     │
│  • Type-safe Database Queries                                 │
└─────────────────────────────────────────────────────────────────┘
```

## Core Components

### 1. Database Schema (Prisma)
- **Profile**: User profile data with preferences and subscription info
- **UserSession**: Session tracking and analytics
- **UserActivity**: Activity logging for security and analytics
- **CvData**: CV file storage and processing status
- **GeneratedContent**: AI-generated content linked to users

### 2. Client Configuration
- **Prisma Client**: Type-safe database operations with connection pooling
- **Supabase Client**: Browser and server-side clients for auth and storage
- **Environment Variables**: Secure configuration management

### 3. Middleware & Route Protection
- **Public Routes**: `/`, `/about`, `/pricing`, `/contact` - no auth required
- **Protected Routes**: All other routes require authentication
- **Session Management**: Automatic token refresh and cookie handling
- **Anonymous Access**: Main interface accessible without login

### 4. UI Components (shadcn/ui)
- **AuthModal**: Modal-based authentication with OAuth and email/password options
- **AuthForm**: Login/signup forms with validation
- **UserProfile**: Profile management with avatar upload
- **Components Used**: Dialog, Button, Input, Card, Alert, Avatar, Badge

### 5. Database Schema
- **profiles**: User profile data with preferences and subscription info
- **user_sessions**: Session tracking and device analytics
- **user_activity**: Activity logging for security and usage analytics
- **cv_data**: CV file storage and processing status
- **generated_content**: AI-generated content linked to users and CVs



### 6. API Routes
**Authentication Routes:**
- `POST /api/auth/login` - User login
- `POST /api/auth/register` - User registration  
- `POST /api/auth/logout` - Session termination

**User Management Routes:**
- `GET /api/user/profile` - Get user profile with related data
- `PUT /api/user/profile` - Update user profile
- `GET /api/user/preferences` - Get user preferences
- `PUT /api/user/preferences` - Update user preferences

### 7. State Management
**AuthContext Features:**
- User session management with automatic token refresh
- Anonymous mode support for public access
- Profile data management with Prisma integration
- Auth modal handling with data preservation
- Real-time auth state changes via Supabase subscriptions

### 8. Security Features
**Input Validation:**
- Zod schema validation for all forms
- Configurable email validation (strict/lenient modes)
- Disposable email domain blocking
- Password strength requirements


### 9. File Storage
**Avatar Upload:**
- Supabase Storage integration
- 5MB file size limit
- Image type validation (JPEG, PNG, WebP)
- Unique filename generation with user ID

### 10. Error Handling
**Error Types:**
- `AuthError`: Base authentication error class
- `ValidationError`: Form validation errors
- `AuthenticationError`: Login/credential errors
- `AuthorizationError`: Permission/access errors

**Error Handler:** Centralized error processing with user-friendly messages



### 11. Prisma ORM Benefits
- **Type Safety**: Compile-time type checking and auto-generated TypeScript types
- **Query Builder**: Intuitive API for complex database operations
- **Relations**: Easy handling of database relationships
- **Performance**: Connection pooling, query optimization, and caching
- **Migrations**: Version-controlled database schema changes

### 12. Configuration
**Environment Variables:**
- Supabase URL and API keys
- Database connection string
- Security settings (session timeout, rate limits)
- File storage configuration

**Health Check:** `GET /api/health/auth` - Tests Supabase and Prisma connections

---

