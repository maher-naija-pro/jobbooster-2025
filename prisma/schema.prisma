generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique
  fullName         String?            @map("full_name")
  username         String?            @unique
  avatarUrl        String?            @map("avatar_url")
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  cvData           CvData[]
  cvJobMatches     CvJobMatch[]
  generatedContent GeneratedContent[]
  jobData          JobData[]
  userActivities   UserActivity[]
  userSessions     UserSession[]

  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}

model CvData {
  id                      String             @id @default(cuid())
  userId                  String             @map("user_id")
  fileName                String             @map("file_name")
  fileUrl                 String             @map("file_url")
  fileSize                Int                @map("file_size")
  mimeType                String             @map("mime_type")
  status                  String             @default("uploaded")
  extractedText           String?            @map("extracted_text")
  metadata                Json?
  createdAt               DateTime           @default(now()) @map("created_at")
  updatedAt               DateTime           @updatedAt @map("updated_at")
  analysisCount           Int                @default(0) @map("analysis_count")
  analysisId              String?            @map("analysis_id")
  analysisVersion         String?            @map("analysis_version")
  archiveDate             DateTime?          @map("archive_date")
  dataClassification      String?            @map("data_classification")
  gdprConsent             Boolean            @default(false) @map("gdpr_consent")
  isArchived              Boolean            @default(false) @map("is_archived")
  isPublic                Boolean            @default(false) @map("is_public")
  lastAnalyzedAt          DateTime?          @map("last_analyzed_at")
  originalFilename        String?            @map("original_filename")
  processingCompletedAt   DateTime?          @map("processing_completed_at")
  processingError         String?            @map("processing_error")
  processingStartedAt     DateTime?          @map("processing_started_at")
  processingStatus        String             @default("uploaded") @map("processing_status")
  retentionDate           DateTime?          @map("retention_date")
  viewCount               Int                @default(0) @map("view_count")
  errorMessage            String?            @map("error_message")
  extractedCertifications Json?              @map("extracted_certifications")
  extractedEducation      Json?              @map("extracted_education")
  extractedExperience     Int?               @map("extracted_experience")
  extractedLanguages      Json?              @map("extracted_languages")
  extractedSkills         Json?              @map("extracted_skills")
  isActive                Boolean            @default(true) @map("is_active")
  modelUsed               String?            @map("model_used")
  parameters              Json?
  processingTime          Int?               @map("processing_time")
  company                 String?
  department              String?
  employmentType          String?            @map("employment_type")
  experienceLevel         String?            @map("experience_level")
  industry                String?
  jobType                 String?            @map("job_type")
  location                String?
  preferredQualifications Json?              @map("preferred_qualifications")
  remoteType              String?            @map("remote_type")
  requiredQualifications  Json?              @map("required_qualifications")
  salaryRange             String?            @map("salary_range")
  analysisConfidence      Decimal?           @map("analysis_confidence") @db.Decimal(3, 2)
  categories              Json?
  certifications          Json?
  completenessScore       Decimal?           @map("completeness_score") @db.Decimal(3, 2)
  consistencyScore        Decimal?           @map("consistency_score") @db.Decimal(3, 2)
  dateOfBirth             DateTime?          @map("date_of_birth")
  education               Json?
  email                   String?
  extractionQuality       Json?              @map("extraction_quality")
  firstName               String?            @map("first_name")
  fullName                String?            @map("full_name")
  isLatest                Boolean            @default(true) @map("is_latest")
  languages               Json?
  lastName                String?            @map("last_name")
  linkedinUrl             String?            @map("linkedin_url")
  nationality             String?
  parentId                String?            @map("parent_id")
  personalInfo            Json?              @map("personal_info")
  phone                   String?
  priorityLevel           Int                @default(0) @map("priority_level")
  professionalSummary     String?            @map("professional_summary")
  projects                Json?
  softSkills              Json?              @map("soft_skills")
  tags                    Json?
  technicalSkills         Json?              @map("technical_skills")
  version                 Int                @default(1)
  websiteUrl              String?            @map("website_url")
  workExperience          Json?              @map("work_experience")
  profile                 Profile            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  cvJobMatches            CvJobMatch[]
  generatedContent        GeneratedContent[]

  @@index([userId])
  @@index([status])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([version, isLatest])
  @@map("cv_data")
}

model GeneratedContent {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  cvDataId  String?  @map("cv_data_id")
  type      String
  title     String?
  content   String
  metadata  Json?
  version   Int      @default(1)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cvData    CvData?  @relation(fields: [cvDataId], references: [id])
  profile   Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("generated_content")
}

model CvUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cv_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  @@map("user_notifications")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter")
}

model JobData {
  id                      String       @id @default(cuid())
  userId                  String       @map("user_id")
  content                 String
  title                   String?
  company                 String?
  status                  String       @default("uploaded")
  processingStatus        String       @default("uploaded") @map("processing_status")
  processingStartedAt     DateTime?    @map("processing_started_at")
  processingCompletedAt   DateTime?    @map("processing_completed_at")
  processingError         String?      @map("processing_error")
  processingTime          Int?         @map("processing_time")
  modelUsed               String?      @map("model_used")
  parameters              Json?
  errorMessage            String?      @map("error_message")
  analysisId              String?      @map("analysis_id")
  analysisVersion         String?      @map("analysis_version")
  extractedSkills         Json?        @map("extracted_skills")
  requiredQualifications  Json?        @map("required_qualifications")
  preferredQualifications Json?        @map("preferred_qualifications")
  jobType                 String?      @map("job_type")
  location                String?
  remoteType              String?      @map("remote_type")
  salaryRange             String?      @map("salary_range")
  experienceLevel         String?      @map("experience_level")
  industry                String?
  department              String?
  employmentType          String?      @map("employment_type")
  viewCount               Int          @default(0) @map("view_count")
  lastAnalyzedAt          DateTime?    @map("last_analyzed_at")
  analysisCount           Int          @default(0) @map("analysis_count")
  isPublic                Boolean      @default(false) @map("is_public")
  retentionDate           DateTime?    @map("retention_date")
  gdprConsent             Boolean      @default(false) @map("gdpr_consent")
  isActive                Boolean      @default(true) @map("is_active")
  dataClassification      String?      @map("data_classification")
  isArchived              Boolean      @default(false) @map("is_archived")
  archiveDate             DateTime?    @map("archive_date")
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  extractedCertifications Json?        @map("extracted_certifications")
  extractedEducation      Json?        @map("extracted_education")
  extractedExperience     Int?         @map("extracted_experience")
  extractedLanguages      Json?        @map("extracted_languages")
  metadata                Json?
  originalFilename        String?      @map("original_filename")
  applicationDeadline     DateTime?    @map("application_deadline")
  applicationUrl          String?      @map("application_url")
  benefits                Json?
  categories              Json?
  companyDescription      String?      @map("company_description")
  companyLogoUrl          String?      @map("company_logo_url")
  companyName             String?      @map("company_name")
  companySize             String?      @map("company_size")
  description             String?
  educationMatchScore     Decimal?     @map("education_match_score") @db.Decimal(5, 2)
  educationRequirements   Json?        @map("education_requirements")
  experienceMatchScore    Decimal?     @map("experience_match_score") @db.Decimal(5, 2)
  experienceRequirements  Json?        @map("experience_requirements")
  hardRequirements        Json?        @map("hard_requirements")
  isLatest                Boolean      @default(true) @map("is_latest")
  jobId                   String?      @map("job_id")
  jobPostingUrl           String?      @map("job_posting_url")
  keywords                Json?
  locationMatchScore      Decimal?     @map("location_match_score") @db.Decimal(5, 2)
  matchScore              Decimal?     @map("match_score") @db.Decimal(5, 2)
  parentId                String?      @map("parent_id")
  postedDate              DateTime?    @map("posted_date")
  priorityLevel           Int          @default(0) @map("priority_level")
  recruiterInfo           Json?        @map("recruiter_info")
  requirements            Json?
  skillsMatchScore        Decimal?     @map("skills_match_score") @db.Decimal(5, 2)
  softRequirements        Json?        @map("soft_requirements")
  source                  String?
  startDate               DateTime?    @map("start_date")
  tags                    Json?
  technicalRequirements   Json?        @map("technical_requirements")
  version                 Int          @default(1)
  cvJobMatches            CvJobMatch[]
  profile                 Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([industry])
  @@index([jobType])
  @@index([location])
  @@index([experienceLevel])
  @@index([version, isLatest])
  @@map("job_data")
}

model CvJobMatch {
  id                     String    @id @default(cuid())
  cvDataId               String    @map("cv_data_id")
  jobDataId              String    @map("job_data_id")
  userId                 String    @map("user_id")
  overallMatchScore      Decimal   @map("overall_match_score") @db.Decimal(5, 2)
  skillsMatchScore       Decimal   @map("skills_match_score") @db.Decimal(5, 2)
  experienceMatchScore   Decimal   @map("experience_match_score") @db.Decimal(5, 2)
  educationMatchScore    Decimal   @map("education_match_score") @db.Decimal(5, 2)
  locationMatchScore     Decimal   @map("location_match_score") @db.Decimal(5, 2)
  salaryMatchScore       Decimal?  @map("salary_match_score") @db.Decimal(5, 2)
  matchedSkills          Json?     @map("matched_skills")
  missingSkills          Json?     @map("missing_skills")
  extraSkills            Json?     @map("extra_skills")
  matchReasons           Json?     @map("match_reasons")
  improvementSuggestions Json?     @map("improvement_suggestions")
  status                 String    @default("pending")
  isBookmarked           Boolean   @default(false) @map("is_bookmarked")
  isApplied              Boolean   @default(false) @map("is_applied")
  applicationDate        DateTime? @map("application_date")
  notes                  String?
  analysisVersion        String?   @map("analysis_version")
  modelUsed              String?   @map("model_used")
  analysisDate           DateTime  @default(now()) @map("analysis_date")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  cvData                 CvData    @relation(fields: [cvDataId], references: [id], onDelete: Cascade)
  jobData                JobData   @relation(fields: [jobDataId], references: [id], onDelete: Cascade)
  profile                Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([cvDataId, jobDataId])
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([overallMatchScore])
  @@index([status])
  @@index([isBookmarked])
  @@index([isApplied])
  @@index([analysisDate])
  @@map("cv_job_matches")
}

model JobCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  parentId    String?       @map("parent_id")
  isActive    Boolean       @default(true) @map("is_active")
  sortOrder   Int           @default(0) @map("sort_order")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  parent      JobCategory?  @relation("JobCategoryHierarchy", fields: [parentId], references: [id])
  children    JobCategory[] @relation("JobCategoryHierarchy")

  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("job_categories")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?
  description String?
  synonyms    Json?
  isActive    Boolean  @default(true) @map("is_active")
  popularity  Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@index([isActive])
  @@index([popularity])
  @@map("skills")
}

model AnalysisTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  template    Json
  isActive    Boolean  @default(true) @map("is_active")
  isDefault   Boolean  @default(false) @map("is_default")
  version     String   @default("1.0.0")
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
  @@map("analysis_templates")
}
