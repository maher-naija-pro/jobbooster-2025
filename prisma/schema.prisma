generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique
  fullName         String?            @map("full_name")
  username         String?            @unique
  avatarUrl        String?            @map("avatar_url")
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  cvData           CvData[]
  generatedContent GeneratedContent[]
  userActivities   UserActivity[]
  userSessions     UserSession[]
  jobData          JobData[]

  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}

model CvData {
  id                    String             @id @default(cuid())
  userId                String             @map("user_id")
  fileName              String             @map("file_name")
  fileUrl               String             @map("file_url")
  fileSize              Int                @map("file_size")
  mimeType              String             @map("mime_type")
  status                String             @default("uploaded")
  extractedText         String?            @map("extracted_text")
  metadata              Json?
  
  // Processing & Analysis Fields
  processingStatus      String             @default("uploaded") @map("processing_status")
  processingStartedAt   DateTime?          @map("processing_started_at")
  processingCompletedAt DateTime?          @map("processing_completed_at")
  processingError       String?            @map("processing_error")
  processingTime        Int?               @map("processing_time") // Processing time in milliseconds
  modelUsed             String?            @map("model_used") // AI model used for analysis
  parameters            Json?              // Analysis parameters used
  errorMessage          String?            @map("error_message") // Specific error message if analysis failed
  analysisId            String?            @map("analysis_id")
  analysisVersion       String?            @map("analysis_version")
  
  // Enhanced Metadata Fields
  originalFilename      String?            @map("original_filename")
  
  // CV-Specific Extracted Data Fields
  extractedSkills       Json?              @map("extracted_skills") // Array of skills extracted from CV
  extractedExperience   Int?               @map("extracted_experience") // Years of experience extracted
  extractedEducation    Json?              @map("extracted_education") // Education details (degrees, institutions)
  extractedCertifications Json?            @map("extracted_certifications") // Professional certifications found
  extractedLanguages    Json?              @map("extracted_languages") // Languages mentioned in CV
  
  // Job-Related Fields (from job_data table)
  company               String?            // Company name
  requiredQualifications Json?             @map("required_qualifications") // Required qualifications
  preferredQualifications Json?            @map("preferred_qualifications") // Preferred qualifications
  
  // Job-Specific Metadata Fields (from job_data table)
  jobType               String?            @map("job_type") // Type of employment
  location              String?            // Job location
  remoteType            String?            @map("remote_type") // Remote work type
  salaryRange           String?            @map("salary_range") // Salary range
  experienceLevel       String?            @map("experience_level") // Required experience level
  industry              String?            // Industry sector
  department            String?            // Department
  employmentType        String?            @map("employment_type") // Employment type
  
  // User Interaction Tracking
  viewCount             Int                @default(0) @map("view_count")
  lastAnalyzedAt        DateTime?          @map("last_analyzed_at")
  analysisCount         Int                @default(0) @map("analysis_count")
  
  // Security & Compliance Fields
  isPublic              Boolean            @default(false) @map("is_public")
  isActive              Boolean            @default(true) @map("is_active") // Whether CV is still active/current
  retentionDate         DateTime?          @map("retention_date")
  gdprConsent           Boolean            @default(false) @map("gdpr_consent")
  dataClassification    String?            @map("data_classification")
  
  // Performance & Optimization Fields
  isArchived            Boolean            @default(false) @map("is_archived")
  archiveDate           DateTime?          @map("archive_date")
  
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  profile               Profile            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  generatedContent      GeneratedContent[]

  @@map("cv_data")
}

model GeneratedContent {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  cvDataId  String?  @map("cv_data_id")
  type      String
  title     String?
  content   String
  metadata  Json?
  version   Int      @default(1)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cvData    CvData?  @relation(fields: [cvDataId], references: [id])
  profile   Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("generated_content")
}

model CvUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cv_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  @@map("user_notifications")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter")
}

model JobData {
  id                    String             @id @default(cuid())
  userId                String             @map("user_id")
  content               String
  title                 String?
  company               String?
  status                String             @default("uploaded")
  
  // Processing & Analysis Fields
  processingStatus      String             @default("uploaded") @map("processing_status")
  processingStartedAt   DateTime?          @map("processing_started_at")
  processingCompletedAt DateTime?          @map("processing_completed_at")
  processingError       String?            @map("processing_error")
  processingTime        Int?               @map("processing_time")
  modelUsed             String?            @map("model_used")
  parameters            Json?
  errorMessage          String?            @map("error_message")
  analysisId            String?            @map("analysis_id")
  analysisVersion       String?            @map("analysis_version")
  
  // Extracted Data Fields
  extractedSkills       Json?              @map("extracted_skills")
  requiredQualifications Json?             @map("required_qualifications")
  preferredQualifications Json?            @map("preferred_qualifications")
  
  // CV-Related Fields (from cv_data table)
  extractedExperience   Int?               @map("extracted_experience") // Years of experience extracted
  extractedEducation    Json?              @map("extracted_education") // Education details (degrees, institutions)
  extractedCertifications Json?            @map("extracted_certifications") // Professional certifications found
  extractedLanguages    Json?              @map("extracted_languages") // Languages mentioned
  originalFilename      String?            @map("original_filename") // Original filename
  metadata              Json?              // Additional metadata
  
  // Job-Specific Metadata Fields
  jobType               String?            @map("job_type")
  location              String?
  remoteType            String?            @map("remote_type")
  salaryRange           String?            @map("salary_range")
  experienceLevel       String?            @map("experience_level")
  industry              String?
  department            String?
  employmentType        String?            @map("employment_type")
  
  // User Interaction Tracking
  viewCount             Int                @default(0) @map("view_count")
  lastAnalyzedAt        DateTime?          @map("last_analyzed_at")
  analysisCount         Int                @default(0) @map("analysis_count")
  
  // Security & Compliance Fields
  isPublic              Boolean            @default(false) @map("is_public")
  retentionDate         DateTime?          @map("retention_date")
  gdprConsent           Boolean            @default(false) @map("gdpr_consent")
  isActive              Boolean            @default(true) @map("is_active")
  dataClassification    String?            @map("data_classification")
  
  // Performance & Optimization Fields
  isArchived            Boolean            @default(false) @map("is_archived")
  archiveDate           DateTime?          @map("archive_date")
  
  // Standard Timestamps
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  
  // Relations
  profile               Profile            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("job_data")
}
