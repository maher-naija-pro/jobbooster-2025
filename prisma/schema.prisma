generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Enums ===
enum ProcessingStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum MatchStatus {
  PENDING
  ANALYZING
  COMPLETED
  FAILED
  ARCHIVED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  VOLUNTEER
}

enum RemoteType {
  ONSITE
  REMOTE
  HYBRID
  FLEXIBLE
}

enum ExperienceLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  EXECUTIVE
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum NotificationType {
  SYSTEM
  JOB_MATCH
  ANALYSIS_COMPLETE
  REMINDER
  PROMOTIONAL
  SECURITY
}

enum GeneratedContentType {
  COVER_LETTER
  CV_OPTIMIZATION
  INTERVIEW_PREP
  SKILL_ANALYSIS
  JOB_RECOMMENDATIONS
  CAREER_ADVICE
}

enum ApplicationStatus {
  APPLIED
  VIEWED
  INTERVIEWED
  REJECTED
  OFFERED
  ACCEPTED
  WITHDRAWN
}

enum CareerLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  EXECUTIVE
  C_LEVEL
}

enum CareerStage {
  EARLY_CAREER
  MID_CAREER
  LATE_CAREER
  TRANSITION
}

enum CompanyGrowthStage {
  STARTUP
  SCALE_UP
  MATURE
  DECLINING
}

enum LearningGoalType {
  SKILL_DEVELOPMENT
  CERTIFICATION
  DEGREE
  COURSE
  WORKSHOP
  CONFERENCE
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique @db.VarChar(255)
  fullName         String?            @map("full_name") @db.VarChar(255)
  username         String?            @unique @db.VarChar(50)
  avatarUrl        String?            @map("avatar_url") @db.VarChar(500)
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")

  // === Status & Processing ===
  isActive                Boolean  @default(true) @map("is_active") // Is this record active
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag for faster queries
  archiveDate             DateTime? @map("archive_date") // Date archived
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record

  // === Security & Authentication ===
  lastPasswordChange      DateTime? @map("last_password_change") // Last password change
  failedLoginAttempts     Int       @default(0) @map("failed_login_attempts") // Failed login attempts
  accountLockedUntil      DateTime? @map("account_locked_until") // Account lockout until
  twoFactorEnabled        Boolean   @default(false) @map("two_factor_enabled") // 2FA enabled
  securityQuestions       Json?     @map("security_questions") // Security questions
  
  // === Email Verification ===
  emailVerified           Boolean   @default(false) @map("email_verified") // Email verification status
  emailVerifiedAt         DateTime? @map("email_verified_at") // When email was verified
  emailVerificationStatus String    @default("pending") @map("email_verification_status") @db.VarChar(20) // pending, verified, failed, expired
  emailVerificationAttempts Int     @default(0) @map("email_verification_attempts") // Number of verification attempts
  lastVerificationSent    DateTime? @map("last_verification_sent") // Last time verification email was sent

  // === Processing Timestamps & Error Tracking ===
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  createdBy        String?            @map("created_by") @db.VarChar(50) // Who created the record
  updatedBy        String?            @map("updated_by") @db.VarChar(50) // Who last updated the record
  version          Int                @default(1) // Optimistic locking version



  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version

  // === User Engagement & Analytics ===
  lastLoginAt              DateTime? @map("last_login_at") // Last login timestamp
  loginCount               Int       @default(0) @map("login_count") // Total login count
  totalSessionTime         Int       @default(0) @map("total_session_time") // Total session time in minutes
  averageSessionDuration   Int?      @map("average_session_duration") // Average session duration
  featureUsageStats        Json?     @map("feature_usage_stats") // Feature usage statistics
  lastActiveAt             DateTime? @map("last_active_at") // Last activity timestamp
  streakDays               Int       @default(0) @map("streak_days") // Consecutive active days
  longestStreak            Int       @default(0) @map("longest_streak") // Longest active streak
  
  // === User Preferences & Customization ===
  preferredJobTypes        Json?     @map("preferred_job_types") // Array of preferred job types
  preferredLocations       Json?     @map("preferred_locations") // Array of preferred locations
  salaryExpectations       Json?     @map("salary_expectations") // Salary range preferences
  careerGoals              String?   @map("career_goals") @db.Text // Career objectives
  skillInterests           Json?     @map("skill_interests") // Skills user wants to develop
  industryPreferences      Json?     @map("industry_preferences") // Preferred industries
  
  // === Enhanced Analytics ===
  careerStage              CareerStage? @map("career_stage") // Career stage
  skillGaps                Json?        @map("skill_gaps") // Identified skill gaps


  // === Subscription & Billing ===
  subscriptionStatus       String?   @map("subscription_status") @db.VarChar(50) // active, cancelled, expired
  subscriptionStartDate    DateTime? @map("subscription_start_date") // When subscription started
  subscriptionEndDate      DateTime? @map("subscription_end_date") // When subscription ends
  billingCycle             String?   @map("billing_cycle") @db.VarChar(20) // monthly, yearly
  paymentMethod            String?   @map("payment_method") @db.VarChar(50) // card, paypal, etc.
  trialEndsAt              DateTime? @map("trial_ends_at") // Trial period end
  isTrialUser              Boolean   @default(false) @map("is_trial_user") // Is currently on trial

  // === Relations ===
  cvData           CvData[]
  cvJobMatches     CvJobMatch[]
  generatedContent GeneratedContent[]
  jobData          JobData[]
  userActivities   UserActivity[]
  userSessions     UserSession[]
  featureUsage     FeatureUsage[]
 




  // === Data Quality & Monitoring ===

  errorCount              Int       @default(0) @map("error_count") // Error count
  warningCount            Int       @default(0) @map("warning_count") // Warning count

  @@index([lastLoginAt])
  @@index([subscriptionStatus])
  @@index([isTrialUser])
  @@index([lastActiveAt])
  @@index([isActive])
  @@index([isDeleted])
  @@index([lastLoginAt, isActive])
  @@index([subscriptionStatus, subscriptionEndDate])
  @@index([isTrialUser, trialEndsAt])
  @@index([isActive, isDeleted, createdAt])
  @@index([lastActiveAt, isActive])
  @@index([careerStage, isActive])
  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String?
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("user_activity")
}

model CvData {
  // === Identification & Ownership ===
  id                      String   @id @default(cuid()) // Unique CV record ID
  userId                  String   @map("user_id") // Owner user ID

  // === File Information ===
  fileName                String?  @map("file_name") @db.VarChar(255) // Uploaded file name
  fileUrl                 String?  @map("file_url") @db.VarChar(500) // File storage URL
  fileSize                Int?     @map("file_size") // File size in bytes
  mimeType                String?  @map("mime_type") @db.VarChar(100) // MIME type of the file

 

  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive                Boolean?  @default(true) @map("is_active") // Is this record active
  isArchived              Boolean?  @default(false) @map("is_archived") // Is this record archived
  isDeleted               Boolean?  @default(false) @map("is_deleted") // Soft delete flag
  isPublic                Boolean?  @default(false) @map("is_public") // Is this record public
  isLatest                Boolean?  @default(true) @map("is_latest") // Is this the latest version
  archiveDate             DateTime? @map("archive_date") // Date archived
  retentionDate           DateTime? @map("retention_date") // Data retention date
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp


  // === Processing Timestamps & Error Tracking ===
  createdAt               DateTime @default(now()) @map("created_at") // Record creation timestamp
  updatedAt               DateTime @updatedAt @map("updated_at") // Last update timestamp
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp
  lastAnalyzedAt          DateTime? @map("last_analyzed_at") // Last analysis timestamp

  // === Analysis & Versioning ===
  analysisCount           Int      @default(0) @map("analysis_count") // Number of analyses performed
  version                 Int      @default(1) // Version number

  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version
 
  // === View & Priority ===
  viewCount               Int      @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime? @map("last_viewed_at") // Last view timestamp

  // === Enhanced Analytics ===
  averageMatchScore        Decimal?  @map("average_match_score") @db.Decimal(5, 2) // Average job match score
  bestMatchScore           Decimal?  @map("best_match_score") @db.Decimal(5, 2) // Best job match score
  totalJobMatches          Int       @default(0) @map("total_job_matches") // Total job matches generated
  
  // === Content Quality Metrics ===
  // completenessScore        Decimal?  @map("completeness_score") @db.Decimal(3, 2) // CV completeness (0-1)
  // readabilityScore         Decimal?  @map("readability_score") @db.Decimal(3, 2) // Content readability
  // atsScore                 Decimal?  @map("ats_score") @db.Decimal(3, 2) // ATS compatibility score
  // keywordDensity           Json?     @map("keyword_density") // Keyword density analysis
  // improvementSuggestions   Json?     @map("improvement_suggestions") // AI-generated suggestions
  // templateTags             Json?     @map("template_tags") // Template tags for search
   
  // === Extracted Raw Data ===
  extractedText           String?  @map("extracted_text") // Raw extracted text from file
  metadata                Json?    // Additional metadata

  // === Personal Information ===

  firstName               String?  @map("first_name") @db.VarChar(100) // First name
  lastName                String?  @map("last_name") @db.VarChar(100) // Last name
  fullName                String?  @map("full_name") @db.VarChar(255) // Full name
  dateOfBirth             DateTime? @map("date_of_birth") // Date of birth
  email                   String?  @db.VarChar(255) // Email address
  phone                   String?  @db.VarChar(20) // Phone number
  nationality             String?  @db.VarChar(100) // Nationality
  linkedinUrl             String?  @map("linkedin_url") @db.VarChar(500) // LinkedIn profile URL
  websiteUrl              String?  @map("website_url") @db.VarChar(500) // Personal website URL
  githubUrl               String?  @map("github_url") @db.VarChar(500) // GitHub profile URL



  // === Skills, Experience, and Education ===
  technicalSkills         Json?    @map("technical_skills") // Array of technical skills (legacy)
  softSkills              Json?    @map("soft_skills") // Array of soft skills (legacy)
  languages               Json?    // Languages spoken (legacy)
  certifications          Json?    // Certifications and licenses
  education               Json?    // Educational background details
  workExperience          Json?    @map("work_experience") // Work experience details
  projects                Json?    // Notable projects and achievements


  // === Relations ===
  profile                 Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade) // Link to Profile
  cvJobMatches            CvJobMatch[] // Job matches for this CV
  generatedContent        GeneratedContent[] // Generated content for this CV

  // === Data Quality & Monitoring ===
 // dataQualityScore        Decimal?  @map("data_quality_score") @db.Decimal(3, 2) // Overall data quality (0-1)
 // completenessPercentage  Decimal?  @map("completeness_percentage") @db.Decimal(5, 2) // Data completeness %
 // errorCount              Int       @default(0) @map("error_count") // Error count
 // warningCount            Int       @default(0) @map("warning_count") // Warning count


  // === Indexes & Table Mapping ===
  @@index([userId])
  @@index([createdAt])
  @@map("cv_data")
}

model GeneratedContent {
  // === Identification & Ownership ===
  id        String                @id @default(cuid())
  userId    String                @map("user_id")
  cvDataId  String?               @map("cv_data_id")
  jobDataId String?               @map("job_data_id")
  
  // === Content Information ===
  type      GeneratedContentType
  title     String?               @db.VarChar(255)
  content   String?               @db.Text

  // === Content Metadata & Analysis ===
  metadata        Json?           // Structured metadata for job-specific data
  confidenceScore Decimal?        @map("confidence_score") @db.Decimal(3, 2) // AI confidence score
  qualityScore    Decimal?        @map("quality_score") @db.Decimal(3, 2) // Content quality score
  wordCount       Int?            @map("word_count") // Word count of content
  readingTime     Int?            @map("reading_time") // Estimated reading time in minutes
  
  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive        Boolean         @default(true) @map("is_active")
  isArchived      Boolean         @default(false) @map("is_archived")
  isDeleted       Boolean         @default(false) @map("is_deleted") // Soft delete flag
  isPublic        Boolean         @default(false) @map("is_public")
  isLatest        Boolean         @default(true) @map("is_latest")
  
  // === Lifecycle Management ===
  archiveDate     DateTime?       @map("archive_date")
  archivedBy      String?         @map("archived_by") @db.VarChar(50) // Who archived the record
  archiveReason   String?         @map("archive_reason") @db.VarChar(100) // Reason for archiving
  retentionDate   DateTime?       @map("retention_date")
  deletedAt       DateTime?       @map("deleted_at")
  deletedBy       String?         @map("deleted_by") @db.VarChar(50) // Who deleted the record
  
  // === Audit Trail ===
  createdBy       String?         @map("created_by") @db.VarChar(50) // Who created the record
  updatedBy       String?         @map("updated_by") @db.VarChar(50) // Who last updated the record
  version         Int             @default(1) // Optimistic locking version
  
  // === Usage & Analytics ===
  viewCount         Int        @default(0) @map("view_count")
  lastViewedAt      DateTime?  @map("last_viewed_at")
  copyCount         Int        @default(0) @map("copy_count") // How many times content was copied
  lastCopiedAt      DateTime?  @map("last_copied_at")         // Last time content was copied
  

  // === Content Quality & Effectiveness ===
  effectivenessScore      Decimal?  @map("effectiveness_score") @db.Decimal(3, 2) // Content effectiveness
  userRating              Decimal?  @map("user_rating") @db.Decimal(3, 2) // User rating (1-5)
  feedback                String?   @db.Text // User feedback
  improvementSuggestions  Json?     @map("improvement_suggestions") // AI suggestions for improvement
  

  // === Content Optimization ===
  readabilityScore        Decimal?  @map("readability_score") @db.Decimal(3, 2) // Readability score
  keywordOptimization     Json?     @map("keyword_optimization") // Keyword optimization data
  toneAnalysis            Json?     @map("tone_analysis") // Tone and sentiment analysis
  
  // === Processing Timestamps & Error Tracking ===
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp


  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version
  
  // === Relations ===
  cvData          CvData?         @relation(fields: [cvDataId], references: [id], onDelete: Cascade)
  jobData         JobData?        @relation(fields: [jobDataId], references: [id], onDelete: Cascade)
  profile         Profile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  // === Data Quality & Monitoring ===
  lastHealthCheck         DateTime? @map("last_health_check") // Last health check
  errorCount              Int       @default(0) @map("error_count") // Error count
  warningCount            Int       @default(0) @map("warning_count") // Warning count

  // === Indexes & Constraints ===
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([type])
  @@index([isActive])
  @@index([isArchived])
  @@index([isDeleted])
  @@index([createdAt])
  @@index([isLatest])
  @@index([confidenceScore])
  @@index([qualityScore])
  @@index([effectivenessScore])
  @@index([userRating])
  @@index([userId, isActive, createdAt])
  @@index([processingStatus, createdAt])
  @@index([isActive, isArchived, createdAt])
  @@index([confidenceScore, qualityScore, createdAt])
  @@index([type, isActive, createdAt])
  @@map("generated_content")
}

model CvUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cv_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String?
  message   String?
  isRead    Boolean          @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")
  readAt    DateTime?        @map("read_at")

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("user_notifications")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  message   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("contact_messages")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("newsletter")
}

model JobData {
  // === Identification & Ownership ===
  id                      String       @id @default(cuid()) // Unique job data ID
  userId                  String       @map("user_id") // Owner user ID

  // === Job Content & Description ===
  content                 String?      @db.Text // Raw job posting content
  title                   String?      @db.VarChar(255) // Job title
  companyName             String?      @map("company_name") @db.VarChar(255) // Company name (normalized)
  companyDescription      String?      @map("company_description") @db.Text // Company description
  companyLogoUrl          String?      @map("company_logo_url") @db.VarChar(500) // Company logo URL
  companySize             CompanySize? @map("company_size") // Company size
  industry                String?      @db.VarChar(100) // Industry sector
  department              String?      @db.VarChar(100) // Department
  jobType                 JobType?     @map("job_type") // Type of job
  remoteType              RemoteType?  @map("remote_type") // Remote/hybrid/onsite
  location                String?      @db.VarChar(255) // Job location
  salaryRange             String?      @map("salary_range") @db.VarChar(100) // Salary range
  experienceLevel         ExperienceLevel? @map("experience_level") // Required experience level
  applicationDeadline     DateTime?    @map("application_deadline") // Application deadline
  benefits                Json?        // Job benefits
  recruiterInfo           Json?        @map("recruiter_info") // Recruiter contact/info

  // === Requirements & Qualifications ===

  educationRequirements   Json?        @map("education_requirements") // Education requirements
  experienceRequirements  Json?        @map("experience_requirements") // Experience requirements
  hardRequirements        Json?        @map("hard_requirements") // Hard requirements (skills, certs, etc.)
  softRequirements        Json?        @map("soft_requirements") // Soft requirements (communication, etc.)
  softSkillRequirements   Json?        @map("soft_skill_requirements") // Soft skill requirements (e.g., teamwork, adaptability)
  technicalRequirements   Json?        @map("technical_requirements") // Technical skills required



  // === Status & Lifecycle ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing status
  isActive                Boolean      @default(true) @map("is_active") // Is job data active
  isArchived              Boolean      @default(false) @map("is_archived") // Is job data archived
  isDeleted               Boolean      @default(false) @map("is_deleted") // Soft delete flag
  isPublic                Boolean      @default(false) @map("is_public") // Is job data public
  isLatest                Boolean      @default(true) @map("is_latest") // Is this the latest version
  priority                Int?         @default(0) // Processing priority
  archiveDate             DateTime?    @map("archive_date") // Date archived
  archivedBy              String?      @map("archived_by") @db.VarChar(50) // Who archived the record
  archiveReason           String?      @map("archive_reason") @db.VarChar(100) // Reason for archiving
  retentionDate           DateTime?    @map("retention_date") // Data retention date
  deletedAt               DateTime?    @map("deleted_at") // Soft delete timestamp
  deletedBy               String?      @map("deleted_by") @db.VarChar(50) // Who deleted the record
  
  // === Audit Trail ===
  createdBy               String?      @map("created_by") @db.VarChar(50) // Who created the record
  updatedBy               String?      @map("updated_by") @db.VarChar(50) // Who last updated the record
  version                 Int          @default(1) // Optimistic locking version

  // === Processing Timestamps & Error Tracking ===
  createdAt               DateTime     @default(now()) @map("created_at") // Record creation timestamp
  updatedAt               DateTime     @updatedAt @map("updated_at") // Last update timestamp
  processingStartedAt     DateTime?    @map("processing_started_at") // Processing start time
  processingCompletedAt   DateTime?    @map("processing_completed_at") // Processing completion time
  processingError         String?      @map("processing_error") // Processing error message
  processingTime          Int?         @map("processing_time") // Processing time in ms
  retryCount              Int          @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime?    @map("last_retry_at") // Last retry timestamp

  // === Analysis & Versioning ===
  analysisCount           Int          @default(0) @map("analysis_count") // Number of analyses performed
  lastAnalyzedAt          DateTime?    @map("last_analyzed_at") // Last analysis timestamp

  // === Privacy & Compliance ===
  gdprConsent             Boolean      @default(false) @map("gdpr_consent") // GDPR consent
  dataClassification      String?      @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?      @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime?    @map("consent_date") // Date consent was given
  consentVersion          String?      @map("consent_version") @db.VarChar(20) // Consent version

  // === View & Priority ===
  viewCount               Int          @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime?    @map("last_viewed_at") // Last view timestamp

  // === Market Intelligence ===
  marketDemand             Decimal?  @map("market_demand") @db.Decimal(3, 2) // Job market demand score
  competitionLevel         Decimal?  @map("competition_level") @db.Decimal(3, 2) // Competition level
  averageSalary            Decimal?  @map("average_salary") @db.Decimal(10, 2) // Market average salary
  salaryPercentile         Int?      @map("salary_percentile") // Salary percentile (25th, 50th, 75th, 90th)
  growthTrend              String?   @map("growth_trend") @db.VarChar(20) // growing, stable, declining
  skillTrends              Json?     @map("skill_trends") // Trending skills for this role
  locationDemand           Json?     @map("location_demand") // Demand by location
  
  // === Job Quality Metrics ===
  jobQualityScore          Decimal?  @map("job_quality_score") @db.Decimal(3, 2) // Overall job quality
  descriptionClarity       Decimal?  @map("description_clarity") @db.Decimal(3, 2) // Description clarity
  requirementsClarity      Decimal?  @map("requirements_clarity") @db.Decimal(3, 2) // Requirements clarity
  benefitsScore            Decimal?  @map("benefits_score") @db.Decimal(3, 2) // Benefits attractiveness
  

  // === Company Intelligence ===
  companyRating            Decimal?  @map("company_rating") @db.Decimal(3, 2) // Company rating
  companySizeCategory      String?   @map("company_size_category") @db.VarChar(50) // Size category
  companyGrowthStage       CompanyGrowthStage? @map("company_growth_stage") // startup, scale-up, mature
  companyCulture           Json?     @map("company_culture") // Company culture indicators
  diversityScore           Decimal?  @map("diversity_score") @db.Decimal(3, 2) // Diversity score

  // === Relations ===
  cvJobMatches            CvJobMatch[] // Related CV-job matches
  generatedContent        GeneratedContent[] // Generated content for this job
  profile                 Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade) // User profile relation

  // === Data Quality & Monitoring ===
  lastHealthCheck         DateTime? @map("last_health_check") // Last health check
  errorCount              Int       @default(0) @map("error_count") // Error count
  warningCount            Int       @default(0) @map("warning_count") // Warning count

  // === Indexes & Mapping ===
  @@index([userId])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([isDeleted])
  @@index([createdAt])
  @@index([industry])
  @@index([jobType])
  @@index([location])
  @@index([experienceLevel])
  @@index([version, isLatest])
  @@index([companyName])
  @@index([title])
  @@index([applicationDeadline])
  @@index([marketDemand])
  @@index([competitionLevel])
  @@index([jobQualityScore])
  @@index([companyRating])
  @@index([companyGrowthStage])
  @@index([userId, isActive, createdAt])
  @@index([processingStatus, priority, createdAt])
  @@index([isActive, isArchived, createdAt])
  @@index([processingStatus, createdAt])
  @@map("job_data")
}


model CvJobMatch {
  // === Identification & Relations ===
  id                     String    @id @default(cuid()) // Unique match ID
  cvDataId               String    @map("cv_data_id") // Linked CV
  jobDataId              String    @map("job_data_id") // Linked Job
  userId                 String    @map("user_id") // Owner/User

  cvData                 CvData    @relation(fields: [cvDataId], references: [id], onDelete: Cascade) // CV relation
  jobData                JobData   @relation(fields: [jobDataId], references: [id], onDelete: Cascade) // Job relation
  profile                Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade) // User profile

  // === Match Scores ===
  overallMatchScore      Decimal?  @map("overall_match_score") @db.Decimal(5, 2) // Overall match score (0-100)
  skillsMatchScore       Decimal?  @map("skills_match_score") @db.Decimal(5, 2) // Skills match score
  experienceMatchScore   Decimal?  @map("experience_match_score") @db.Decimal(5, 2) // Experience match score
  educationMatchScore    Decimal?  @map("education_match_score") @db.Decimal(5, 2) // Education match score
  locationMatchScore     Decimal?  @map("location_match_score") @db.Decimal(5, 2) // Location match score
  salaryMatchScore       Decimal?  @map("salary_match_score") @db.Decimal(5, 2) // Salary match score

  // === Analysis Quality and Confidence ===
  analysisConfidence     Decimal?  @map("analysis_confidence") @db.Decimal(3, 2) // Overall confidence in analysis
  completenessScore      Decimal?  @map("completeness_score") @db.Decimal(3, 2) // How complete the CV information is
  consistencyScore       Decimal?  @map("consistency_score") @db.Decimal(3, 2) // Internal consistency of information

  // === Skills & Analysis Details ===
  matchedSkills          Json?     @map("matched_skills") // Skills that matched
  missingSkills          Json?     @map("missing_skills") // Skills missing from CV
  extraSkills            Json?     @map("extra_skills") // Extra skills
  matchReasons           Json?     @map("match_reasons") // Reasons for match
  improvementSuggestions Json?     @map("improvement_suggestions") // Suggestions for improvement
  lastDownloadedAt       DateTime? @map("last_downloaded_at") // Last time analysis downloaded


  // === Analysis Metadata ===
  analysisVersion        String?   @map("analysis_version") // Analysis version
  modelUsed              String?   @map("model_used") // Model used for analysis
  analysisDate           DateTime  @default(now()) @map("analysis_date") // Date analyzed
  analysisDuration       Int?      @map("analysis_duration") // Analysis duration in milliseconds

  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive               Boolean   @default(true) @map("is_active") // Is this match active
  isArchived             Boolean   @default(false) @map("is_archived") // Is this match archived
  isDeleted              Boolean   @default(false) @map("is_deleted") // Soft delete flag
  archiveDate            DateTime? @map("archive_date") // Date archived
  archivedBy             String?   @map("archived_by") @db.VarChar(50) // Who archived the record
  archiveReason          String?   @map("archive_reason") @db.VarChar(100) // Reason for archiving
  retentionDate          DateTime? @map("retention_date") // Data retention date
  deletedAt              DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy              String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  
  // === Audit Trail ===
  createdBy              String?   @map("created_by") @db.VarChar(50) // Who created the record
  updatedBy              String?   @map("updated_by") @db.VarChar(50) // Who last updated the record
  version                Int       @default(1) // Optimistic locking version

  // === Processing Timestamps & Error Tracking ===
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp


  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version

  // === View & Priority ===
  viewCount               Int      @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime? @map("last_viewed_at") // Last view timestamp

  // === Timestamps ===
  createdAt              DateTime  @default(now()) @map("created_at") // Created at
  updatedAt              DateTime  @updatedAt @map("updated_at") // Updated at

  // === Data Quality & Monitoring ===
  lastHealthCheck         DateTime? @map("last_health_check") // Last health check
  errorCount              Int       @default(0) @map("error_count") // Error count
  warningCount            Int       @default(0) @map("warning_count") // Warning count

  // === Indexes & Constraints ===
  @@unique([cvDataId, jobDataId])
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([overallMatchScore])
  @@index([analysisDate])
  @@index([isActive])
  @@index([isArchived])
  @@index([isDeleted])
  @@index([userId, isActive, createdAt])
  @@index([processingStatus, createdAt])
  @@index([isActive, isArchived, createdAt])
  @@index([overallMatchScore, isActive, createdAt])
  @@index([analysisDate, overallMatchScore])
  @@map("cv_job_matches")
}



model FeatureUsage {
  id                      String    @id @default(cuid())
  userId                  String    @map("user_id")
  featureName             String    @map("feature_name") @db.VarChar(100)
  usageCount              Int       @default(0) @map("usage_count")
  lastUsedAt              DateTime? @map("last_used_at")
  totalTimeSpent          Int       @default(0) @map("total_time_spent") // in minutes
  averageSessionTime      Int?      @map("average_session_time") // in minutes
  successRate             Decimal?  @map("success_rate") @db.Decimal(5, 2)
  satisfactionScore       Decimal?  @map("satisfaction_score") @db.Decimal(3, 2)
  
  // === Audit Trail ===
  createdBy               String?   @map("created_by") @db.VarChar(50) // Who created the record
  updatedBy               String?   @map("updated_by") @db.VarChar(50) // Who last updated the record
  version                 Int       @default(1) // Optimistic locking version
  
  // === Timestamps ===
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  // === Deletion & Retention Fields ===
  isDeleted               Boolean  @default(false) @map("is_deleted") // Soft delete flag
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp
  deletedBy               String?   @map("deleted_by") @db.VarChar(50) // Who deleted the record
  retentionDate           DateTime? @map("retention_date") // Data retention date
  retentionPolicy         String?   @map("retention_policy") @db.VarChar(100) // Retention policy applied
  dataClassification      String?   @map("data_classification") @db.VarChar(50) // Data classification level
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?   @map("consent_version") @db.VarChar(20) // Consent version
  
  // === Relations ===
  profile                 Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  @@unique([userId, featureName])
  @@index([userId])
  @@index([featureName])
  @@index([isDeleted])
  @@index([deletedAt])
  @@index([retentionDate])
  @@map("feature_usage")
}



model MarketTrends {
  id                    String    @id @default(cuid())
  skill                 String    @db.VarChar(100)
  industry              String?   @db.VarChar(100)
  location              String?   @db.VarChar(100)
  demandScore           Decimal   @map("demand_score") @db.Decimal(5, 2)
  salaryTrend           String?   @map("salary_trend") @db.VarChar(20) // RISING, STABLE, DECLINING
  growthRate            Decimal?  @map("growth_rate") @db.Decimal(5, 2)
  period                String    @db.VarChar(20) // MONTHLY, QUARTERLY, YEARLY
  dataSource            String?   @map("data_source") @db.VarChar(100)
  sampleSize            Int?      @map("sample_size")
  confidence            Decimal?  @db.Decimal(3, 2)
  createdAt             DateTime  @default(now()) @map("created_at")
  
  @@index([skill, industry, location])
  @@index([period, createdAt])
  @@index([demandScore, createdAt])
  @@map("market_trends")
}










// === Performance Monitoring ===
model PerformanceMetrics {
  id                    String    @id @default(cuid())
  tableName             String    @map("table_name") @db.VarChar(100)
  operation             String    @db.VarChar(50) // SELECT, INSERT, UPDATE, DELETE
  executionTime         Int       @map("execution_time") // in milliseconds
  recordCount           Int?      @map("record_count")
  queryHash             String?   @map("query_hash") @db.VarChar(64)
  userId                String?   @map("user_id") @db.VarChar(50)
  ipAddress             String?   @map("ip_address") @db.VarChar(45)
  userAgent             String?   @map("user_agent") @db.VarChar(500)
  createdAt             DateTime  @default(now()) @map("created_at")
  
  @@index([tableName, operation])
  @@index([executionTime, createdAt])
  @@index([userId, createdAt])
  @@map("performance_metrics")
}

// === Data Archival ===
model ArchivedCvData {
  // Same structure as CvData but for archived records
  id                    String    @id @default(cuid())
  originalId            String    @map("original_id")
  userId                String    @map("user_id")
  fileName              String?   @map("file_name") @db.VarChar(255)
  fileUrl               String?   @map("file_url") @db.VarChar(500)
  fileSize              Int?      @map("file_size")
  mimeType              String?   @map("mime_type") @db.VarChar(100)
  processingStatus      ProcessingStatus @map("processing_status")
  archivedAt            DateTime  @map("archived_at")
  archiveReason         String    @map("archive_reason") @db.VarChar(100)
  archivedBy            String?   @map("archived_by") @db.VarChar(50)
  retentionDate         DateTime? @map("retention_date")
  
  // Essential data for reference
  fullName              String?   @map("full_name") @db.VarChar(255)
  email                 String?   @db.VarChar(255)
  createdAt             DateTime  @map("created_at")
  
  @@index([originalId])
  @@index([userId, archivedAt])
  @@index([archiveReason, archivedAt])
  @@map("archived_cv_data")
}

model ArchivedJobData {
  id                    String    @id @default(cuid())
  originalId            String    @map("original_id")
  userId                String    @map("user_id")
  title                 String?   @db.VarChar(255)
  companyName           String?   @map("company_name") @db.VarChar(255)
  archivedAt            DateTime  @map("archived_at")
  archiveReason         String    @map("archive_reason") @db.VarChar(100)
  archivedBy            String?   @map("archived_by") @db.VarChar(50)
  retentionDate         DateTime? @map("retention_date")
  
  // Essential data for reference
  createdAt             DateTime  @map("created_at")
  
  @@index([originalId])
  @@index([userId, archivedAt])
  @@index([archiveReason, archivedAt])
  @@map("archived_job_data")
}

// === Schema Version Tracking ===
model SchemaVersion {
  id                String   @id @default(cuid())
  version           String   @unique @db.VarChar(20) // Schema version (e.g., "1.0.0")
  migrationId       String?  @map("migration_id") @db.VarChar(50) // Migration ID
  appliedAt         DateTime @default(now()) @map("applied_at") // When applied
  appliedBy         String?  @map("applied_by") @db.VarChar(50) // Who applied it
  description       String?  @db.Text // Description of changes
  isActive          Boolean  @default(true) @map("is_active") // Is this version active
  
  @@map("schema_versions")
}







