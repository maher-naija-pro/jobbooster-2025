generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique
  fullName         String?            @map("full_name")
  username         String?            @unique
  avatarUrl        String?            @map("avatar_url")
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  cvData           CvData[]
  generatedContent GeneratedContent[]
  userActivities   UserActivity[]
  userSessions     UserSession[]

  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}

model CvData {
  id               String             @id @default(cuid())
  userId           String             @map("user_id")
  fileName         String             @map("file_name")
  fileUrl          String             @map("file_url")
  fileSize         Int                @map("file_size")
  mimeType         String             @map("mime_type")
  status           String             @default("uploaded")
  extractedText    String?            @map("extracted_text")
  metadata         Json?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  profile          Profile            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  generatedContent GeneratedContent[]

  @@map("cv_data")
}

model GeneratedContent {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  cvDataId  String?  @map("cv_data_id")
  type      String
  title     String?
  content   String
  metadata  Json?
  version   Int      @default(1)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cvData    CvData?  @relation(fields: [cvDataId], references: [id])
  profile   Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("generated_content")
}

model FileUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("file_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  @@map("user_notifications")
}

model Demo {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("demo")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter")
}
