generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Enums ===
enum ProcessingStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum MatchStatus {
  PENDING
  ANALYZING
  COMPLETED
  FAILED
  ARCHIVED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  VOLUNTEER
}

enum RemoteType {
  ONSITE
  REMOTE
  HYBRID
  FLEXIBLE
}

enum ExperienceLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  EXECUTIVE
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum NotificationType {
  SYSTEM
  JOB_MATCH
  ANALYSIS_COMPLETE
  REMINDER
  PROMOTIONAL
  SECURITY
}

enum GeneratedContentType {
  COVER_LETTER
  CV_OPTIMIZATION
  INTERVIEW_PREP
  SKILL_ANALYSIS
  JOB_RECOMMENDATIONS
  CAREER_ADVICE
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique
  fullName         String?            @map("full_name") @db.VarChar(255)
  username         String?            @unique @db.VarChar(50)
  avatarUrl        String?            @map("avatar_url") @db.VarChar(500)
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")

  // === Status & Processing ===
  isActive                Boolean  @default(true) @map("is_active") // Is this record active
  archiveDate             DateTime? @map("archive_date") // Date archived
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp

  // === Processing Timestamps & Error Tracking ===
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")



  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version



  // === Relations ===
  cvData           CvData[]
  cvJobMatches     CvJobMatch[]
  generatedContent GeneratedContent[]
  jobData          JobData[]
  userActivities   UserActivity[]
  userSessions     UserSession[]


  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}

model CvData {
  // === Identification & Ownership ===
  id                      String   @id @default(cuid()) // Unique CV record ID
  userId                  String   @map("user_id") // Owner user ID

  // === File Information ===
  fileName                String   @map("file_name") @db.VarChar(255) // Uploaded file name
  fileUrl                 String   @map("file_url") @db.VarChar(500) // File storage URL
  fileSize                Int      @map("file_size") // File size in bytes
  mimeType                String   @map("mime_type") @db.VarChar(100) // File MIME type
 

  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive                Boolean  @default(true) @map("is_active") // Is this record active
  isArchived              Boolean  @default(false) @map("is_archived") // Is this record archived
  isPublic                Boolean  @default(false) @map("is_public") // Is this record public
  isLatest                Boolean  @default(true) @map("is_latest") // Is this the latest version
  archiveDate             DateTime? @map("archive_date") // Date archived
  retentionDate           DateTime? @map("retention_date") // Data retention date
  deletedAt               DateTime? @map("deleted_at") // Soft delete timestamp

  // === Processing Timestamps & Error Tracking ===
  createdAt               DateTime @default(now()) @map("created_at") // Record creation timestamp
  updatedAt               DateTime @updatedAt @map("updated_at") // Last update timestamp
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp
  lastAnalyzedAt          DateTime? @map("last_analyzed_at") // Last analysis timestamp

  // === Analysis & Versioning ===
  analysisCount           Int      @default(0) @map("analysis_count") // Number of analyses performed
  version                 Int      @default(1) // Version number
  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version
 
  // === View & Priority ===
  viewCount               Int      @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime? @map("last_viewed_at") // Last view timestamp

            
  // === Extracted Raw Data ===
  extractedText           String?  @map("extracted_text") // Raw extracted text from file
  metadata                Json?    // Additional metadata



  // === Personal Information ===
  personalInfo            Json?    @map("personal_info") // Name, contact info, location, etc.
  firstName               String?  @map("first_name") @db.VarChar(100) // First name
  lastName                String?  @map("last_name") @db.VarChar(100) // Last name
  fullName                String?  @map("full_name") @db.VarChar(255) // Full name
  dateOfBirth             DateTime? @map("date_of_birth") // Date of birth
  email                   String?  @db.VarChar(255) // Email address
  phone                   String?  @db.VarChar(20) // Phone number
  nationality             String?  @db.VarChar(100) // Nationality
  linkedinUrl             String?  @map("linkedin_url") @db.VarChar(500) // LinkedIn profile URL
  websiteUrl              String?  @map("website_url") @db.VarChar(500) // Personal website URL
  githubUrl               String?  @map("github_url") @db.VarChar(500) // GitHub profile URL

  // === Professional Summary & Objectives ===
  professionalSummary     String?  @map("professional_summary") // Professional summary/summary

  // === Skills, Experience, and Education ===
  technicalSkills         Json?    @map("technical_skills") // Array of technical skills (legacy)
  softSkills              Json?    @map("soft_skills") // Array of soft skills (legacy)
  languages               Json?    // Languages spoken (legacy)
  certifications          Json?    // Certifications and licenses
  education               Json?    // Educational background details
  workExperience          Json?    @map("work_experience") // Work experience details
  projects                Json?    // Notable projects and achievements
  salaryRange             String?  @map("salary_range") // Salary range


  // === Relations ===
  profile                 Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade) // Link to Profile
  cvJobMatches            CvJobMatch[] // Job matches for this CV
  generatedContent        GeneratedContent[] // Generated content for this CV

  // === Indexes & Table Mapping ===
  @@index([userId])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([version, isLatest])
  @@index([email])
  @@index([fullName])
  @@map("cv_data")
}

model GeneratedContent {
  // === Identification & Ownership ===
  id        String                @id @default(cuid())
  userId    String                @map("user_id")
  cvDataId  String?               @map("cv_data_id")
  jobDataId String?               @map("job_data_id")
  
  // === Content Information ===
  type      GeneratedContentType
  title     String?               @db.VarChar(255)
  content   String                @db.Text

  // === Content Metadata & Analysis ===
  metadata        Json?           // Structured metadata for job-specific data
  confidenceScore Decimal?        @map("confidence_score") @db.Decimal(3, 2) // AI confidence score
  qualityScore    Decimal?        @map("quality_score") @db.Decimal(3, 2) // Content quality score
  wordCount       Int?            @map("word_count") // Word count of content
  readingTime     Int?            @map("reading_time") // Estimated reading time in minutes
  
  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive        Boolean         @default(true) @map("is_active")
  isArchived      Boolean         @default(false) @map("is_archived")
  isPublic        Boolean         @default(false) @map("is_public")
  isLatest        Boolean         @default(true) @map("is_latest")
  
  // === Lifecycle Management ===
  archiveDate     DateTime?       @map("archive_date")
  retentionDate   DateTime?       @map("retention_date")
  deletedAt       DateTime?       @map("deleted_at")
  
  // === Usage & Analytics ===
  viewCount         Int        @default(0) @map("view_count")
  lastViewedAt      DateTime?  @map("last_viewed_at")
  copyCount         Int        @default(0) @map("copy_count") // How many times content was copied
  lastCopiedAt      DateTime?  @map("last_copied_at")         // Last time content was copied
  
  // === Processing Timestamps & Error Tracking ===
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp


  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version
  
  // === Relations ===
  cvData          CvData?         @relation(fields: [cvDataId], references: [id], onDelete: Cascade)
  jobData         JobData?        @relation(fields: [jobDataId], references: [id], onDelete: Cascade)
  profile         Profile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  // === Indexes & Constraints ===
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([type])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([isLatest])
  @@index([confidenceScore])
  @@index([qualityScore])
  @@map("generated_content")
}

model CvUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cv_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")
  readAt    DateTime?        @map("read_at")

  @@map("user_notifications")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter")
}

model JobData {
  // === Identification & Ownership ===
  id                      String       @id @default(cuid()) // Unique job data ID
  userId                  String       @map("user_id") // Owner user ID

  // === Job Content & Description ===
  content                 String       @db.Text // Raw job posting content
  title                   String?      @db.VarChar(255) // Job title
  companyName             String?      @map("company_name") @db.VarChar(255) // Company name (normalized)
  companyDescription      String?      @map("company_description") @db.Text // Company description
  companyLogoUrl          String?      @map("company_logo_url") @db.VarChar(500) // Company logo URL
  companySize             CompanySize? @map("company_size") // Company size
  industry                String?      @db.VarChar(100) // Industry sector
  department              String?      @db.VarChar(100) // Department
  jobType                 JobType?     @map("job_type") // Type of job
  remoteType              RemoteType?  @map("remote_type") // Remote/hybrid/onsite
  location                String?      @db.VarChar(255) // Job location
  salaryRange             String?      @map("salary_range") @db.VarChar(100) // Salary range
  experienceLevel         ExperienceLevel? @map("experience_level") // Required experience level
  applicationDeadline     DateTime?    @map("application_deadline") // Application deadline
  benefits                Json?        // Job benefits
  recruiterInfo           Json?        @map("recruiter_info") // Recruiter contact/info

  // === Requirements & Qualifications ===

  educationRequirements   Json?        @map("education_requirements") // Education requirements
  experienceRequirements  Json?        @map("experience_requirements") // Experience requirements
  hardRequirements        Json?        @map("hard_requirements") // Hard requirements (skills, certs, etc.)
  softRequirements        Json?        @map("soft_requirements") // Soft requirements (communication, etc.)
  softSkillRequirements   Json?        @map("soft_skill_requirements") // Soft skill requirements (e.g., teamwork, adaptability)
  technicalRequirements   Json?        @map("technical_requirements") // Technical skills required



  // === Status & Lifecycle ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing status
  isActive                Boolean      @default(true) @map("is_active") // Is job data active
  isArchived              Boolean      @default(false) @map("is_archived") // Is job data archived
  isPublic                Boolean      @default(false) @map("is_public") // Is job data public
  isLatest                Boolean      @default(true) @map("is_latest") // Is this the latest version
  priority                Int?         @default(0) // Processing priority
  archiveDate             DateTime?    @map("archive_date") // Date archived
  retentionDate           DateTime?    @map("retention_date") // Data retention date
  deletedAt               DateTime?    @map("deleted_at") // Soft delete timestamp

  // === Processing Timestamps & Error Tracking ===
  createdAt               DateTime     @default(now()) @map("created_at") // Record creation timestamp
  updatedAt               DateTime     @updatedAt @map("updated_at") // Last update timestamp
  processingStartedAt     DateTime?    @map("processing_started_at") // Processing start time
  processingCompletedAt   DateTime?    @map("processing_completed_at") // Processing completion time
  processingError         String?      @map("processing_error") // Processing error message
  processingTime          Int?         @map("processing_time") // Processing time in ms
  retryCount              Int          @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime?    @map("last_retry_at") // Last retry timestamp

  // === Analysis & Versioning ===
  analysisCount           Int          @default(0) @map("analysis_count") // Number of analyses performed
  lastAnalyzedAt          DateTime?    @map("last_analyzed_at") // Last analysis timestamp
  version                 Int          @default(1) // Version number

  // === Privacy & Compliance ===
  gdprConsent             Boolean      @default(false) @map("gdpr_consent") // GDPR consent
  dataClassification      String?      @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?      @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime?    @map("consent_date") // Date consent was given
  consentVersion          String?      @map("consent_version") @db.VarChar(20) // Consent version

  // === View & Priority ===
  viewCount               Int          @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime?    @map("last_viewed_at") // Last view timestamp



  // === Relations ===
  cvJobMatches            CvJobMatch[] // Related CV-job matches
  generatedContent        GeneratedContent[] // Generated content for this job
  profile                 Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade) // User profile relation

  // === Indexes & Mapping ===
  @@index([userId])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([industry])
  @@index([jobType])
  @@index([location])
  @@index([experienceLevel])
  @@index([version, isLatest])
  @@index([companyName])
  @@index([title])
  @@index([applicationDeadline])
  @@map("job_data")
}


model CvJobMatch {
  // === Identification & Relations ===
  id                     String    @id @default(cuid()) // Unique match ID
  cvDataId               String    @map("cv_data_id") // Linked CV
  jobDataId              String    @map("job_data_id") // Linked Job
  userId                 String    @map("user_id") // Owner/User

  cvData                 CvData    @relation(fields: [cvDataId], references: [id], onDelete: Cascade) // CV relation
  jobData                JobData   @relation(fields: [jobDataId], references: [id], onDelete: Cascade) // Job relation
  profile                Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade) // User profile

  // === Match Scores ===
  overallMatchScore      Decimal   @map("overall_match_score") @db.Decimal(5, 2) // Overall match score (0-100)
  skillsMatchScore       Decimal   @map("skills_match_score") @db.Decimal(5, 2) // Skills match score
  experienceMatchScore   Decimal   @map("experience_match_score") @db.Decimal(5, 2) // Experience match score
  educationMatchScore    Decimal   @map("education_match_score") @db.Decimal(5, 2) // Education match score
  locationMatchScore     Decimal   @map("location_match_score") @db.Decimal(5, 2) // Location match score
  salaryMatchScore       Decimal?  @map("salary_match_score") @db.Decimal(5, 2) // Salary match score

  // === Analysis Quality and Confidence ===
  analysisConfidence     Decimal?  @map("analysis_confidence") @db.Decimal(3, 2) // Overall confidence in analysis
  completenessScore      Decimal?  @map("completeness_score") @db.Decimal(3, 2) // How complete the CV information is
  consistencyScore       Decimal?  @map("consistency_score") @db.Decimal(3, 2) // Internal consistency of information

  // === Skills & Analysis Details ===
  matchedSkills          Json?     @map("matched_skills") // Skills that matched
  missingSkills          Json?     @map("missing_skills") // Skills missing from CV
  extraSkills            Json?     @map("extra_skills") // Extra skills
  matchReasons           Json?     @map("match_reasons") // Reasons for match
  improvementSuggestions Json?     @map("improvement_suggestions") // Suggestions for improvement
  lastDownloadedAt       DateTime? @map("last_downloaded_at") // Last time analysis downloaded


  // === Analysis Metadata ===
  analysisVersion        String?   @map("analysis_version") // Analysis version
  modelUsed              String?   @map("model_used") // Model used for analysis
  analysisDate           DateTime  @default(now()) @map("analysis_date") // Date analyzed
  analysisDuration       Int?      @map("analysis_duration") // Analysis duration in milliseconds

  // === Status & Processing ===
  processingStatus        ProcessingStatus @default(UPLOADED) @map("processing_status") // Processing pipeline status
  isActive               Boolean   @default(true) @map("is_active") // Is this match active
  isArchived             Boolean   @default(false) @map("is_archived") // Is this match archived
  archiveDate            DateTime? @map("archive_date") // Date archived
  retentionDate          DateTime? @map("retention_date") // Data retention date
  deletedAt              DateTime? @map("deleted_at") // Soft delete timestamp

  // === Processing Timestamps & Error Tracking ===
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  processingError         String?  @map("processing_error") // Processing error details
  processingTime          Int?     @map("processing_time") // Processing time in milliseconds
  retryCount              Int      @default(0) @map("retry_count") // Number of retry attempts
  lastRetryAt             DateTime? @map("last_retry_at") // Last retry timestamp


  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") @db.VarChar(50) // Data classification level
  retentionPolicy         String?  @map("retention_policy") @db.VarChar(100) // Retention policy applied
  consentDate             DateTime? @map("consent_date") // Date consent was given
  consentVersion          String?  @map("consent_version") @db.VarChar(20) // Consent version

  // === View & Priority ===
  viewCount               Int      @default(0) @map("view_count") // Number of times viewed
  lastViewedAt            DateTime? @map("last_viewed_at") // Last view timestamp

  // === Timestamps ===
  createdAt              DateTime  @default(now()) @map("created_at") // Created at
  updatedAt              DateTime  @updatedAt @map("updated_at") // Updated at

  // === Indexes & Constraints ===
  @@unique([cvDataId, jobDataId])
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([overallMatchScore])
  @@index([analysisDate])
  @@map("cv_job_matches")
}





