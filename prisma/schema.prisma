generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  email            String             @unique
  fullName         String?            @map("full_name")
  username         String?            @unique
  avatarUrl        String?            @map("avatar_url")
  preferences      Json               @default("{}")
  subscription     Json               @default("{\"plan\": \"free\"}")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  cvData           CvData[]
  cvJobMatches     CvJobMatch[]
  generatedContent GeneratedContent[]
  jobData          JobData[]
  userActivities   UserActivity[]
  userSessions     UserSession[]

  @@map("profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_activity")
}

model CvData {
  // === Identification & Ownership ===
  id                      String   @id @default(cuid()) // Unique CV record ID
  userId                  String   @map("user_id") // Owner user ID

  // === File Information ===
  fileName                String   @map("file_name") // Uploaded file name
  fileUrl                 String   @map("file_url") // File storage URL
  fileSize                Int      @map("file_size") // File size in bytes
  mimeType                String   @map("mime_type") // File MIME type
  originalFilename        String?  @map("original_filename") // Original filename from user

  // === Status & Processing ===
  status                  String   @default("uploaded") // Current status (uploaded, processed, etc.)
  processingStatus        String   @default("uploaded") @map("processing_status") // Processing pipeline status
  isActive                Boolean  @default(true) @map("is_active") // Is this record active
  isArchived              Boolean  @default(false) @map("is_archived") // Is this record archived
  isPublic                Boolean  @default(false) @map("is_public") // Is this record public
  isLatest                Boolean  @default(true) @map("is_latest") // Is this the latest version
  archiveDate             DateTime? @map("archive_date") // Date archived
  retentionDate           DateTime? @map("retention_date") // Data retention date

  // === Processing Timestamps & Error Tracking ===
  createdAt               DateTime @default(now()) @map("created_at") // Record creation timestamp
  updatedAt               DateTime @updatedAt @map("updated_at") // Last update timestamp
  processingStartedAt     DateTime? @map("processing_started_at") // When processing started
  processingCompletedAt   DateTime? @map("processing_completed_at") // When processing finished
  lastAnalyzedAt          DateTime? @map("last_analyzed_at") // Last analysis timestamp
  errorMessage            String?  @map("error_message") // General error message
  processingError         String?  @map("processing_error") // Processing error details

  // === Analysis & Versioning ===
  analysisCount           Int      @default(0) @map("analysis_count") // Number of analyses performed
  analysisId              String?  @map("analysis_id") // Analysis job ID
  analysisVersion         String?  @map("analysis_version") // Analysis version
  modelUsed               String?  @map("model_used") // Model used for analysis
  parameters              Json?    // Model parameters
  version                 Int      @default(1) // Version number

  // === Privacy & Compliance ===
  gdprConsent             Boolean  @default(false) @map("gdpr_consent") // GDPR consent flag
  dataClassification      String?  @map("data_classification") // Data classification label

  // === View & Priority ===
  viewCount               Int      @default(0) @map("view_count") // Number of times viewed
  priorityLevel           Int      @default(0) @map("priority_level") // Priority for processing

  // === Parent/Child Relationships ===
  parentId                String?  @map("parent_id") // Parent CVData ID (for versioning)

  // === Extracted Raw Data ===
  extractedText           String?  @map("extracted_text") // Raw extracted text from file
  metadata                Json?    // Additional metadata

  // === Extracted Structured Data ===
  extractedCertifications Json?    @map("extracted_certifications") // Certifications extracted
  extractedEducation      Json?    @map("extracted_education") // Education extracted
  extractedExperience     Int?     @map("extracted_experience") // Years of experience extracted
  extractedLanguages      Json?    @map("extracted_languages") // Languages extracted
  extractedSkills         Json?    @map("extracted_skills") // Skills extracted

  // === Personal Information ===
  personalInfo            Json?    @map("personal_info") // Name, contact info, location, etc.
  firstName               String?  @map("first_name") // First name
  lastName                String?  @map("last_name") // Last name
  fullName                String?  @map("full_name") // Full name
  dateOfBirth             DateTime? @map("date_of_birth") // Date of birth
  email                   String?  // Email address
  phone                   String?  // Phone number
  nationality             String?  // Nationality
  linkedinUrl             String?  @map("linkedin_url") // LinkedIn profile URL
  websiteUrl              String?  @map("website_url") // Personal website URL

  // === Professional Summary & Objectives ===
  professionalSummary     String?  @map("professional_summary") // Professional summary/summary

  // === Skills, Experience, and Education ===
  technicalSkills         Json?    @map("technical_skills") // Array of technical skills
  softSkills              Json?    @map("soft_skills") // Array of soft skills
  languages               Json?    // Languages spoken
  certifications          Json?    // Certifications and licenses
  education               Json?    // Educational background details
  workExperience          Json?    @map("work_experience") // Work experience details
  projects                Json?    // Notable projects and achievements

  // === Job/Offer Related Fields (for matching) ===
  company                 String?  // Company name (if present)
  department              String?  // Department
  employmentType          String?  @map("employment_type") // Employment type
  experienceLevel         String?  @map("experience_level") // Experience level
  industry                String?  // Industry sector
  jobType                 String?  @map("job_type") // Job type (full-time, etc.)
  location                String?  // Location/address
  preferredQualifications Json?    @map("preferred_qualifications") // Preferred qualifications
  remoteType              String?  @map("remote_type") // Remote/hybrid/onsite
  requiredQualifications  Json?    @map("required_qualifications") // Required qualifications
  salaryRange             String?  @map("salary_range") // Salary range

  // === Analysis Quality & Confidence ===
  analysisConfidence      Decimal? @map("analysis_confidence") @db.Decimal(3, 2) // Overall confidence in analysis
  extractionQuality       Json?    @map("extraction_quality") // Quality metrics for each extraction
  completenessScore       Decimal? @map("completeness_score") @db.Decimal(3, 2) // How complete the CV information is
  consistencyScore        Decimal? @map("consistency_score") @db.Decimal(3, 2) // Internal consistency of information

  // === Categorization & Tagging ===
  categories              Json?    // Categories assigned to this CV
  tags                    Json?    // Tags for this CV

  // === Miscellaneous ===
  processingTime          Int?     @map("processing_time") // Processing time in ms

  // === Relations ===
  profile                 Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade) // Link to Profile
  cvJobMatches            CvJobMatch[] // Job matches for this CV
  generatedContent        GeneratedContent[] // Generated content for this CV

  // === Indexes & Table Mapping ===
  @@index([userId])
  @@index([status])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([version, isLatest])
  @@map("cv_data")
}

model GeneratedContent {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  cvDataId  String?  @map("cv_data_id")
  type      String
  title     String?
  content   String
  metadata  Json?
  version   Int      @default(1)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cvData    CvData?  @relation(fields: [cvDataId], references: [id])
  profile   Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("generated_content")
}

model CvUpload {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  bucket    String
  path      String
  isPublic  Boolean  @default(false) @map("is_public")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cv_uploads")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model AuthProvider {
  id           String   @id @default(cuid())
  provider     String   @unique
  clientId     String   @map("client_id")
  clientSecret String   @map("client_secret")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_providers")
}

model UserAuthMethod {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerId String   @map("provider_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("user_auth_methods")
}

model UserNotification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  @@map("user_notifications")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter")
}

model JobData {
  // === Identification & Ownership ===
  id                      String       @id @default(cuid()) // Unique job data ID
  userId                  String       @map("user_id") // Owner user ID

  // === Job Content & Description ===
  content                 String       // Raw job posting content
  title                   String?      // Job title
  companyName             String?      @map("company_name") // Company name (normalized)
  companyDescription      String?      @map("company_description") // Company description
  companyLogoUrl          String?      @map("company_logo_url") // Company logo URL
  companySize             String?      @map("company_size") // Company size (startup/small/medium/large/enterprise)
  industry                String?      // Industry sector
  department              String?      // Department
  jobType                 String?      @map("job_type") // Type of job (full-time, contract, etc.)
  remoteType              String?      @map("remote_type") // Remote/hybrid/onsite
  location                String?      // Job location
  salaryRange             String?      @map("salary_range") // Salary range
  experienceLevel         String?      @map("experience_level") // Required experience level
  applicationDeadline     DateTime?    @map("application_deadline") // Application deadline
  benefits                Json?        // Job benefits
  recruiterInfo           Json?        @map("recruiter_info") // Recruiter contact/info

  // === Requirements & Qualifications ===

  educationRequirements   Json?        @map("education_requirements") // Education requirements
  experienceRequirements  Json?        @map("experience_requirements") // Experience requirements
  hardRequirements        Json?        @map("hard_requirements") // Hard requirements (skills, certs, etc.)
  softRequirements        Json?        @map("soft_requirements") // Soft requirements (communication, etc.)
  softSkillRequirements   Json?        @map("soft_skill_requirements") // Soft skill requirements (e.g., teamwork, adaptability)
  technicalRequirements   Json?        @map("technical_requirements") // Technical skills required



  // === Analysis & Scoring ===
  analysisId              String?      @map("analysis_id") // Analysis run ID
  analysisVersion         String?      @map("analysis_version") // Analysis version
  analysisCount           Int          @default(0) @map("analysis_count") // Number of analyses performed
  lastAnalyzedAt          DateTime?    @map("last_analyzed_at") // Last analysis timestamp
 
  
  // === Status & Lifecycle ===

  processingStatus        String       @default("uploaded") @map("processing_status") // Processing status
  processingStartedAt     DateTime?    @map("processing_started_at") // Processing start time
  processingCompletedAt   DateTime?    @map("processing_completed_at") // Processing completion time
  processingError         String?      @map("processing_error") // Processing error message
  processingTime          Int?         @map("processing_time") // Processing time in ms
  isActive                Boolean      @default(true) @map("is_active") // Is job data active
  isArchived              Boolean      @default(false) @map("is_archived") // Is job data archived
  archiveDate             DateTime?    @map("archive_date") // Date archived
  isPublic                Boolean      @default(false) @map("is_public") // Is job data public
  retentionDate           DateTime?    @map("retention_date") // Data retention date
  gdprConsent             Boolean      @default(false) @map("gdpr_consent") // GDPR consent
  isLatest                Boolean      @default(true) @map("is_latest") // Is this the latest version
  version                 Int          @default(1) // Version number



  // === Relations ===
  cvJobMatches            CvJobMatch[] // Related CV-job matches
  profile                 Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade) // User profile relation

  // === Indexes & Mapping ===
  @@index([userId])
  @@index([status])
  @@index([processingStatus])
  @@index([isActive])
  @@index([isArchived])
  @@index([createdAt])
  @@index([industry])
  @@index([jobType])
  @@index([location])
  @@index([experienceLevel])
  @@index([version, isLatest])
  @@map("job_data")
}

model CvJobMatch {
  id                     String    @id @default(cuid())
  cvDataId               String    @map("cv_data_id")
  jobDataId              String    @map("job_data_id")
  userId                 String    @map("user_id")
  overallMatchScore      Decimal   @map("overall_match_score") @db.Decimal(5, 2)
  skillsMatchScore       Decimal   @map("skills_match_score") @db.Decimal(5, 2)
  experienceMatchScore   Decimal   @map("experience_match_score") @db.Decimal(5, 2)
  educationMatchScore    Decimal   @map("education_match_score") @db.Decimal(5, 2)
  locationMatchScore     Decimal   @map("location_match_score") @db.Decimal(5, 2)
  salaryMatchScore       Decimal?  @map("salary_match_score") @db.Decimal(5, 2)
  matchedSkills          Json?     @map("matched_skills")
  missingSkills          Json?     @map("missing_skills")
  extraSkills            Json?     @map("extra_skills")
  matchReasons           Json?     @map("match_reasons")
  improvementSuggestions Json?     @map("improvement_suggestions")
  status                 String    @default("pending")
  isBookmarked           Boolean   @default(false) @map("is_bookmarked")
  isApplied              Boolean   @default(false) @map("is_applied")
  applicationDate        DateTime? @map("application_date")
  notes                  String?
  analysisVersion        String?   @map("analysis_version")
  modelUsed              String?   @map("model_used")
  analysisDate           DateTime  @default(now()) @map("analysis_date")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  cvData                 CvData    @relation(fields: [cvDataId], references: [id], onDelete: Cascade)
  jobData                JobData   @relation(fields: [jobDataId], references: [id], onDelete: Cascade)
  profile                Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([cvDataId, jobDataId])
  @@index([userId])
  @@index([cvDataId])
  @@index([jobDataId])
  @@index([overallMatchScore])
  @@index([status])
  @@index([isBookmarked])
  @@index([isApplied])
  @@index([analysisDate])
  @@map("cv_job_matches")
}

model JobCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  parentId    String?       @map("parent_id")
  isActive    Boolean       @default(true) @map("is_active")
  sortOrder   Int           @default(0) @map("sort_order")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  parent      JobCategory?  @relation("JobCategoryHierarchy", fields: [parentId], references: [id])
  children    JobCategory[] @relation("JobCategoryHierarchy")

  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("job_categories")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?
  description String?
  synonyms    Json?
  isActive    Boolean  @default(true) @map("is_active")
  popularity  Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@index([isActive])
  @@index([popularity])
  @@map("skills")
}

model AnalysisTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  template    Json
  isActive    Boolean  @default(true) @map("is_active")
  isDefault   Boolean  @default(false) @map("is_default")
  version     String   @default("1.0.0")
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
  @@map("analysis_templates")
}
